
# Script for listing shared mememory and semaphores, relating to 
# and Enterprise Server service.
#
# Info.....
#
#     Written by.......... Luke Bowman (LB)
#     Date of creation.... 31th January 2006.   
#
#     UPDATE HISTORY
#
#        VERSION   DATE      WHO   REASON
#        1.0       31JAN2006 LB    Initial Release
#                                  UnixWare has a different format for ps which
#                                  throws out my use of proc_name
#        1.1       10FEB2006 LB    awk code removed and grep used instead.
#        1.2       09MAR2006 STMK  Version number added.
#        1.3       10MAR2006 LB    Revised annotation.
#        1.4       20MAR2006 LB    mfmemqlist added to list message queues
#        1.5       22MAR2006 LB    Fix to include semaphore with shard memory 
#                                  in list for casmgr.   
#        1.5.5     28MAR2006 LB    mfmemqlist trigger created for so that   
#                                  COBOL int can be located on PATH.   
#                                  (location of mfmem* files must be added to 
#                                   PATH if used outside of Micro Focus T3 
#                                   test system).
#        1.6       03MAY2006 LB     removed for external use.         
#        1.6.5     11MAY2006 LB    mfmemqlist40 added to to support products 
#                                  pre-5.0 products, which use a different 
#                                  sized CFG-AREA.
#        1.7       12MAY2006 LB    Processes are searched for using grep for
#                                  server name in ps, which means embeded
#                                  names would all be identified and removed.
#                                  (e.g. mfmemlist ESDEMO would also locate
#                                  and list semaphores shared mem etc. for 
#                                  ESDEMO2 TMPESDEMO and NEWESDEMO5).
#                                  All ps strings using serv_name start /r
#                                  and end in a space, so grep changed to use
#                                  grep -w r$serv_name when creating the
#                                  search list, so / and " " denote ends.
#                                  Version also brought in line with CVS 
#                                  version.
#
#     @(#)mfmemclean      1.7 - Last Updated 12th May 2006.
#
# Function ...
#
# Script will accept the name of a redundant Service from the command line 
# then search and list all semaphores and shared memory allocated for 
# that service.
# 
# Instructions...
# mfmemlist {Servicename}
# mfmemlist ESDEMO
#

usage_loop()
{

echo "Usage :  mfmemlist {Server name}"
exit 

}

not_found_loop()
{

echo "Server name "$serv_name" not found."
exit 

}

list_proc_loop()
{
##
## Save the name of the process which is last in the list for all 
## process inclding the string $server_name, to use later.
##

## *** REMOVED 1.1 (10FEB2006) ***
##if (test `uname -s` = "UnixWare")then
##   proc_name=`echo $psinput_line | awk '{print $10}'`
##else
##    proc_name=`echo $psinput_line | awk '{print $8}'`
##fi
## *** REMOVED 1.1 (10FEB2006) ***

##
## Save the process id of the process which is last in the list for all 
## $server_name process.
##
procpid=`echo $psinput_line  | awk '{print $2}' `

##
## convert process id to hex, to use in search for hex key in ipcs.
##
hexpid=`echo ""$procpid" "16" o p" | dc`

##
## Some machines use lowercase for hex key so test for upper and lower.
##
lowhexpid=`echo $hexpid | tr [A-Z] [a-z]`

##
## List shared mem and semaphore if the CAS process is casmgr
##
echo $psinput_line | grep casmgr > /dev/null
if (test $? = "0")then
    ipcs -m | grep $hexpid > /dev/null
    if (test $? != "0")then
       ipcs -s | grep $lowhexpid         ## 1.5 22MAR06 added
       ipcs -m | grep $lowhexpid
    else 
       ipcs -s | grep $hexpid            ## 1.5 22MAR06 added
       ipcs -m | grep $hexpid
    fi
else
    ## 
    ## Now list the semaphore relating to the CAS process
    ##
    ipcs -s | grep $hexpid > /dev/null
    if (test $? != "0")then
       ipcs -s | grep $lowhexpid
    else 
       ipcs -s | grep $hexpid
    fi
fi

}

list_queue_loop()
{
##
## List message queue                    
##

##
## Run mfmemqlist COBOL program to extract the id of the message queue
##

case $COBDIR.x in
        .x)  echo "Warning : Unable to search for message queues as COBDIR is not set to a valid "
             echo "COBOL product. Please ensure you environment is correctly configured and re-try." ;;
         *) prod_ver=`cat $COBDIR/etc/cobver |grep PRN | cut -c 21-22`
            if (test $prod_ver = "40") then
               memq_num=`TXDIR=$COBDIR mfmemqlist40 $serv_name`
            else
               memq_num=`TXDIR=$COBDIR mfmemqlist $serv_name`
            fi                      ;;
esac
 
##
## convert process id to hex, to use in search for hex key in ipcs.
##
hexpid=`echo ""$memq_num" "16" o p" | dc`

##
## Some machines use lowercase for hex key so test for upper and lower.
##
lowhexpid=`echo $hexpid | tr [A-Z] [a-z]`

##
## List the message queue for using the id extracted using mfmemqlist
##
ipcs -q | grep $lowhexpid

}

#####################
## MFMEMLIST START ##
#####################

##
## Initialise flags and variables.
##
serv_name=$1
found_end=0

##
## Server name validation section.
## If invalid server name exit with usage or not found message.
##

##
## Checks that a command line has been passed.
##
if (test $serv_name.x = ".x") then
    usage_loop 
else 
    ##
    ## Check that a valid server name has been passed.
    ##
    COLUMNS=160 ps -fu$LOGNAME |  grep -w r$serv_name | fgrep -v grep |  fgrep -v mfmemlist > /dev/null
    if (test $? != "0" ) then
        not_found_loop
    else 
        ##
        ## Create a list of process ids for all processes related to the 
        ## $serv_name. This is stored in a tmp dir using process id of this 
        ## script so as not to conflict with other users.
        ##
        COLUMNS=160 ps -fu$LOGNAME |  grep -w r$serv_name |  fgrep -v grep |  fgrep -v awk |  fgrep -v mfmemlist > /var/tmp/.tmplst$$
    fi
fi
##
## Work through list of server process, removing memory, semaphores, plus
## the process itself, until none are left.
##
###  Loop until no $serv_name processes are found
while true
do
    read psinput_line
    if [ "$psinput_line.x" != ".x" ]
    then
       list_proc_loop
    else
       found_end=1
    fi

    ## When no more process are left for the server, quit.

    if [ "$found_end.x" = "1.x" ]
    then
       list_queue_loop
       break
    fi
done < /var/tmp/.tmplst$$ 
##
## Clean up  process list in a tmp dir
##
 test -f .tmplst$$ && rm -f /var/tmp/.tmplst$$

###################
## MFMEMLIST END ##
###################
